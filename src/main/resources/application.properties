# Se voce nao colocar nenhuma porta, ele assume que seja a padrao do Mysql(3306)
# O ? pra frente e opcional para colocarmos propriedades que quisermos
# Nesse caso colocamos a propriedade para criar o banco caso ele nao exista.
# E tambam o de fuso horario padrao
spring.datasource.url=jdbc:mysql://localhost:3306/algafood?createDatabaseIfNotExist=true&serverTimezone=UTC
# usuario do banco
spring.datasource.username=root
# senha do banco
spring.datasource.password=admin

# Falando pro JPA gerar o DDL pra gente e executar ele no nosso banco de dados
# (Em desenvolvimento tudo bem fazer isso, mas em Producao nao e boa pratica)
# spring.jpa.generate-ddl=true

# (create
# Configuracao especifica do hibernate, que estamos dizendo para a implementacao do JPA a forma que o ddl vai ser executado
# Entao o create dropa todas as tabelas e recria sempre que a aplicacao reiniciar, como e um ambiente de teste aqui tudo bem por enquanto)

# (update
# Nao vai dropar as tabelas, mas sim atualizar os dados na tabela, mas ainda nao a uma boa pratica, poe exemplo
# se formos alterar um nome de coluna no banco de dados, vai continuar a coluna anterior e adicionar uma NOVA coluna sem os dados
# da coluna anterior. Ja se alterar o tipo ou alguma config da coluna, ele nao altera, pois a coluna ja existe.)

# Ou seja, nenhum a boa pratica para utilizar em Produaao.
# spring.jpa.hibernate.ddl-auto=update

# Remover depois de executado
# Pedindo pra ele gerar os scripts de geraaao de schema pra gente (Sem executar)
# spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create

# Remover depois de executado
# Falando a localizaaao que quer que ele crie os arquivos dos scripts que ele vai gerar
# spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/ddl.sql

# Configuraaao onde podemos ver o JPQL gerado no console
# Tambam nao a recomendado utilizar em ambiente de produaao, somente em desenvolvimento
spring.jpa.show-sql=true

# Propriedade para gerar os sql de criaaao de tabela com o motor INNODB e permitir chaves estrangeiras
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# Falando pro hikari qual o maximo de conexaes que queremos no pool de conexaes com o database (Padrao a 10)
spring.datasource.hikari.maximum-pool-size=5
# No manimo 3 (Padrao a 10), e inclusive, quando colocamos 5 na config de maximo, ele configura por padrao o numero do maximo no manimo caso nao colocamos nada.
spring.datasource.hikari.minimum-idle=3
# Tempo ata o pool matar as conexaes excedentes do maximo (Tempo limite de ociosidade) em milissegundos. (O manimo que vc pode colcoar a 10s)
# Detalhe que isso nao a um namero preciso, serve mais como uma SUGESTaO que damos ao hikari para encerrar nesse tempo.
# Basicamente aqui falamos "a partir de 10 segundos de ociosidade, quando voca for checar sua rotina pra matar, pode matar"
spring.datasource.hikari.connection-timeout=10000

# Propriedade onde especificamos onde o flyway vai encontrar os scripts de migraaao e de callback
# Falamos entao: classpath (busque dentro da nossa prapria aplicaaao) (src/main)
# Entao indicamos duas pastas que ele deve buscar, entao vai executar as coisas das duas pastas.
# E fazemos isso, pois adicionamos um profile de dev e um de prd, e entao podemos separar o arquivo testdata
# de teste e de produaao, fazendo ele usar o testdata somente em ambiente de test, em prd isso nem existe.
spring.flyway.locations=classpath:db/migration,classpath:db/testdata

# (ResponseStatus, ResponseStatusException)
# A partir da versao 2.3 do Spring boot nao esta incluido nas respostas a mensagem de erro e sim somente o retorno de
# erro padrao (sem mensagem), fizeram isso para reduzir o risco de vazar informaaaes delicadas,
# para colocar mensagem de erro inclua nas properties:
server.error.include-message=ALWAYS

# Propriedade para habilitar lanaamento de exception para quando propriedade passada no Json da requisiaao nao exista
# default a false
spring.jackson.deserialization.fail-on-unknown-properties=true

# Propriedade para habilitar lanaamento de exception para quando a propriedade no objeto esta com @JsonIgnore
spring.jackson.deserialization.fail-on-ignored-properties=true

# Ativando funcionalidade para lanaar o no handler found
spring.mvc.throw-exception-if-no-handler-found=true

# Desabilitando o cara que serve arquivos estaticos dentro de resources (static)
spring.web.resources.add-mappings=false
